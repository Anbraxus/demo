{
	"info": {
		"_postman_id": "cfd4791f-1e04-4140-b2cb-45c1cac3a1ba",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "24553706-cfd4791f-1e04-4140-b2cb-45c1cac3a1ba"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "51f41c2a-1c29-4ffd-af42-537f423fa3b9",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ae6a966a-9013-4471-bed9-d4f3e1247c54",
						"exec": [
							"// Define variables",
							"const slackBotToken = pm.environment.get(\"SLACK_BOT_TOKEN\"); // Set your Slack Bot Token in environment variables",
							"const slackChannelId = pm.environment.get(\"SLACK_CHANNEL_ID\"); // Set your Slack channel ID",
							"const userId = pm.environment.get(\"SLACK_USER_ID\"); // Set your Slack User ID",
							"",
							"// Input action: Check if the user typed \"break\"",
							"const action = pm.request.body ? pm.request.body.raw : \"\";",
							"",
							"if (action.toLowerCase().includes(\"lunch\")) {",
							"    // Notify Slack channel: User is on break",
							"    const notifyMessage = {",
							"        channel: slackChannelId,",
							"        text: `<@${userId}> is now on a break for 1 hour.`,",
							"    };",
							"",
							"    // Send the \"On Break\" message",
							"    pm.sendRequest(",
							"        {",
							"            url: \"https://slack.com/api/chat.postMessage\",",
							"            method: \"POST\",",
							"            header: {",
							"                Authorization: `Bearer ${slackBotToken}`,",
							"                \"Content-Type\": \"application/json\",",
							"            },",
							"            body: {",
							"                mode: \"raw\",",
							"                raw: JSON.stringify(notifyMessage),",
							"            },",
							"        },",
							"        (err, res) => {",
							"            if (err) {",
							"                console.error(\"Error sending break notification:\", err);",
							"            } else {",
							"                console.log(\"Break notification sent:\", res.json());",
							"            }",
							"        }",
							"    );",
							"",
							"    // Update status to \"On Break\"",
							"    const statusUpdate = {",
							"        profile: {",
							"            status_text: \"On a break\",",
							"            status_emoji: \":coffee:\",",
							"        },",
							"    };",
							"",
							"    pm.sendRequest(",
							"        {",
							"            url: \"https://slack.com/api/users.profile.set\",",
							"            method: \"POST\",",
							"            header: {",
							"                Authorization: `Bearer ${slackBotToken}`,",
							"                \"Content-Type\": \"application/json\",",
							"            },",
							"            body: {",
							"                mode: \"raw\",",
							"                raw: JSON.stringify(statusUpdate),",
							"            },",
							"        },",
							"        (err, res) => {",
							"            if (err) {",
							"                console.error(\"Error updating status to On Break:\", err);",
							"            } else {",
							"                console.log(\"Status updated to On Break:\", res.json());",
							"            }",
							"        }",
							"    );",
							"",
							"    // Set status back to available and notify channel after 1 hour",
							"    setTimeout(() => {",
							"        // Update status to \"Available\"",
							"        const availableStatus = {",
							"            profile: {",
							"                status_text: \"Available\",",
							"                status_emoji: \":smiley:\",",
							"            },",
							"        };",
							"",
							"        pm.sendRequest(",
							"            {",
							"                url: \"https://slack.com/api/users.profile.set\",",
							"                method: \"POST\",",
							"                header: {",
							"                    Authorization: `Bearer ${slackBotToken}`,",
							"                    \"Content-Type\": \"application/json\",",
							"                },",
							"                body: {",
							"                    mode: \"raw\",",
							"                    raw: JSON.stringify(availableStatus),",
							"                },",
							"            },",
							"            (err, res) => {",
							"                if (err) {",
							"                    console.error(\"Error updating status to Available:\", err);",
							"                } else {",
							"                    console.log(\"Status updated to Available:\", res.json());",
							"                }",
							"            }",
							"        );",
							"",
							"        // Notify Slack channel: User is available",
							"        const availableMessage = {",
							"            channel: slackChannelId,",
							"            text: `<@${userId}> is now available.`,",
							"        };",
							"",
							"        pm.sendRequest(",
							"            {",
							"                url: \"https://slack.com/api/chat.postMessage\",",
							"                method: \"POST\",",
							"                header: {",
							"                    Authorization: `Bearer ${slackBotToken}`,",
							"                    \"Content-Type\": \"application/json\",",
							"                },",
							"                body: {",
							"                    mode: \"raw\",",
							"                    raw: JSON.stringify(availableMessage),",
							"                },",
							"            },",
							"            (err, res) => {",
							"                if (err) {",
							"                    console.error(\"Error sending available notification:\", err);",
							"                } else {",
							"                    console.log(\"Available notification sent:\", res.json());",
							"                }",
							"            }",
							"        );",
							"    }, 3600000); // 1 hour in milliseconds",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "3aabe11c-1f65-45ee-a0f4-f135e8a08a58",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		}
	]
}